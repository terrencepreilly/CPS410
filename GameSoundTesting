The GameSound() class is called when sounds are to be implemented during specific points within the game. This class works by 
submitting a string to the class through either a parameter or assigning the string within the class. For testing purposes, we 
have used the string “loss” which activates two sounds, one of a pilot saying “mayday, mayday” and another sound of the ship crashing. 
During the creation of this class, we ran into issues with successful testing as at first the sound did not play through. After some 
research and modification of the code, we quickly realized that the issue causing this was that we had forgotten to include the 
pygame.mixer.init() module, which would initialize the Pygame sound and allow us to use the built in modules in order to play sound 
files being loaded in. After adding this call, we had once again attempted to run this class, using the pre-assigned string to activate 
a certain sound file. While the sound affects did come back this time and were correct, there was still an issue with the time gap 
between the first sound file of the pilot speaking and the second sound file of the ship crashing. This issue is one which we had 
expected to occur prior to testing and the reason which we chose the string, “loss”. We knew that this string had two sound files 
linked to it instead of one and that these sound files would both need to play and within a certain timeframe of one another. 
We wanted the first sound file to be cut off and the second sound file to start playing right before the first would end should it 
play all the way through. In order to handle this issue, we used the pygame.time.wait() module and had to adjust the number of 
milliseconds that we enter into the parameter so that our first sound file would had enough time to play through the piece which we 
wanted to use and so that our second sound file would not start playing until the right moment. The time frame we chose gives the 
player a sense that their pilot is calling for help as they are going down but crashes during the help call and therefore indicates 
a loss for the player. After some back and forth testing, entering a different timeframe within the pygame.time.wait() module, we were 
able to finally find the perfect timeframe so that we could accomplish the sound affects we desired for a loss within the game. 
